// Grid system
@use '../abstracts' as *;

.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc(-1 * var(--spacing-md));
  margin-left: calc(-1 * var(--spacing-md));
}

.col {
  flex: 1 0 0%;
  padding-right: var(--spacing-md);
  padding-left: var(--spacing-md);
}

// Responsive columns
@each $breakpoint, $width in $breakpoints {
  @if $breakpoint != xs {
    @include respond-to($breakpoint) {
      @for $i from 1 through $grid-columns {
        .col-#{$breakpoint}-#{$i} {
          flex: 0 0 auto;
          width: percentage($i / $grid-columns);
          padding-right: var(--spacing-md);
          padding-left: var(--spacing-md);
        }
      }
    }
  } @else {
    @for $i from 1 through $grid-columns {
      .col-#{$i} {
        flex: 0 0 auto;
        width: percentage($i / $grid-columns);
        padding-right: var(--spacing-md);
        padding-left: var(--spacing-md);
      }
    }
  }
}

// Grid utilities
.d-grid {
  display: grid;
}

.gap-0 {
  gap: 0;
}

.gap-1 {
  gap: var(--spacing-xs);
}

.gap-2 {
  gap: var(--spacing-sm);
}

.gap-3 {
  gap: var(--spacing-md);
}

.gap-4 {
  gap: var(--spacing-lg);
}

.gap-5 {
  gap: var(--spacing-xl);
}

// Grid columns
@for $i from 1 through 12 {
  .grid-cols-#{$i} {
    grid-template-columns: repeat($i, minmax(0, 1fr));
  }
}

// Responsive grid columns
@each $breakpoint, $width in $breakpoints {
  @if $breakpoint != xs {
    @include respond-to($breakpoint) {
      @for $i from 1 through 12 {
        .grid-cols-#{$breakpoint}-#{$i} {
          grid-template-columns: repeat($i, minmax(0, 1fr));
        }
      }
    }
  }
}

// Flex utilities
.d-flex {
  display: flex;
}

.d-inline-flex {
  display: inline-flex;
}

.flex-row {
  flex-direction: row;
}

.flex-column {
  flex-direction: column;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-nowrap {
  flex-wrap: nowrap;
}

.justify-start {
  justify-content: flex-start;
}

.justify-end {
  justify-content: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-around {
  justify-content: space-around;
}

.justify-evenly {
  justify-content: space-evenly;
}

.align-start {
  align-items: flex-start;
}

.align-end {
  align-items: flex-end;
}

.align-center {
  align-items: center;
}

.align-baseline {
  align-items: baseline;
}

.align-stretch {
  align-items: stretch;
}

// Flex grow/shrink
.flex-fill {
  flex: 1 1 auto;
}

.flex-grow-0 {
  flex-grow: 0;
}

.flex-grow-1 {
  flex-grow: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

.flex-shrink-1 {
  flex-shrink: 1;
}

// Order
@for $i from 0 through 5 {
  .order-#{$i} {
    order: $i;
  }
}

// Responsive order
@each $breakpoint, $width in $breakpoints {
  @if $breakpoint != xs {
    @include respond-to($breakpoint) {
      @for $i from 0 through 5 {
        .order-#{$breakpoint}-#{$i} {
          order: $i;
        }
      }
    }
  }
} 